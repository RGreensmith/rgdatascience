{
    "title":{"content": "Classification Application", "className": "title--blue"},
    
    "content":[
        {"type":"paragraph","content":"During a Udemy machine learning course (Machine Learning A-Z: Hands on in Python and R), one of the tasks was to create classification models, to predict whether a person would purchase a product advertised to them (in this case an SUV), or not, based on their age and salary, then evaluate the performance of the classifiers by comparing accuracy scores. As the tutorial code had many repetitions (a new python script for each classifier, with repetitions within the scripts), I thought that refactoring the tutorial code to automate the process, and make it as elegant and efficient as I could, would be a good opportunity to get more experience with python. So I created a classification application that automatically creates a variety of classifier models, and automatically generates and saves various outputs (result visualisation plots, accuracy scores, confusion matrix plot, prediction using test data split from the initial imputed dataset and classifier model object) to the current directory. Any number of the following classifiers can be used with the classification application:"},
        {"type":"list","items":["Logistic Regression (LR)","K Nearest Neighbours (KNN)","Support Vector Machine (SVM)", "Kernel Support Vector Machine (KSVM)", "Naive Bayes (NB)", "Decision Tree (DT)", "Random Forest (RF)"]},
        {"type":"paragraph","content":"The classification application requires the current directory to contain the dataset (which must be a csv) and is where the outputs will be saved. The application arguments are the filename of the dataset (as a single character, which must include the file extension) and a string of the types of classifier to be generated (as abbreviations listed above), although the default (all classifiers listed above) can be used."},
        {"type": "paragraph","content": "The classification application calls the ‘dataPreprocessor’ function to split the data into x & y training and test, then standardise the data. The application then calls the classifier function, which takes a string of classifiers to use on the training and test data, and loops through the model type list. Firstly, ‘classifier’ creates an empty variable ‘accuracyScores’ with the length set to the length of ‘modelType’ (string of model types to create). Then, ‘classifier’ loops through a series of logical statements that match the characters in the modelType string with the steps to create the relevant model. ‘classifier’ then imports the relevant module from the sklearn library, creates the classifier model object and creates the variable ‘modelTypeFull’, which is the full name of the type of model."},
        {"type": "paragraph","content": "‘classifier’ then trains the model on the training data, which was passed into the function as ‘xTrain’ and ‘yTrain’, and saves the model into the directory. Classifier then calls the function ‘visualiseResults’ to generate and save results visualisation plots to the directory, for test data then training data, using ‘modelTypeFull’ to parse into the plot titles. Classifier then calls predictResults to make a prediction using the x test set, and saves the prediction along with y test data. Classifier then calls the AccuracyAndConfusion function, which generates and saves a confusion matrix plot to directory, and returns an accuracy score. The accuracy score is added to the accuracyScores variable, with a dictionary key called ‘model’ with the model type defined by parsing modelTypeFull, and ‘accuracyScore’, which is the accuracy score object returned by the AccuracyAndConfusion function."}
    ]
}